HTML-Template-Pro TODO.
=======================

1. A few wrappers for languages other then perl and mono
(php, java, maybe high-level C/glib and C++ wrappers)
to prove the API is designed good enough to fit a vast majority of languages.

2. query() support.

3. Parsing of variable contents as well, 
allowing truly dynamic template generation.
Example:
$t->register_function( f1 => sub {
return $filename ? "<TMPL_INCLUDE NAME=filename>" :
"some text"} );

Variants of proposed syntax:
TMPL_!VAR proposal.
<TMPL_!VAR EXPR="f1()">
or
<TMPL_INCLUDE_VAR as in HTML-Template-Compiled.

Note, that this change will not require underlying C library API changes
but an extra {malloc()+memcopying}/free() management of the memory area.
(we can't guarantee that this memory area will not be destroyed if it itself has
at least tmpl_var).
see for strdup: http://sourceware.org/autobook/autobook/autobook_246.html

4. support of HTML::Template::SET:
<TMPL_SET NAME="name" VALUE="value">
This change will require the change of C library API.
It requires callback for (add name/value pair to a current scope).

5. optimization: expr.y: lexer should look forward for ( and ask is name is userfunc
only if it is before \s*\( pattern.
